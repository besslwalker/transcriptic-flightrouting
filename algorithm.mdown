## Analysis

This problem is reducible from the metric Steiner tree problem, which means it is NP complete.

I suspect it's NP-complete even when all the cities are represented in the tickets,
although I don't have a reduction to prove it.  The greedy algorithm I came up with
certainly isn't guaranteed to be optimal in this case.  

Assumptions: these have been made to simplify the problem.  It's already NP complete,
and the purpose of the exercise is not the complexity of the problem but the architecture 
of the solution.
- There is always an airplane available to take off if we need it.
  (Either there are infinite airplanes at each city, or we can teleport empty airplanes around;
   either way, we don't need to worry about whether we CAN take off from a given city, merely
   whether we SHOULD.)
- Airplanes have infinite capacity.  If a ticket needs to travel on a flight, it can,
  no matter how many other tickets are also on that flight.
- BAD ASSUMPTION: as long as a flight is available, it can transport all passengers who need to take it by flying only once.
This is not the same as the above assumption.  It simplifies the problem by breaking the cost function, assuming that the gas and takeoff cost for one leg pays for that leg no matter how many times that leg is flown.
And sometimes legs will need to be flown twice.  Take this example from my advisor:

> I'm having to do some mental gymnastics to come up with a case, but here's one: 
> Consider 100 cities spread equally spaced to form a circle.  Now consider 200 tickets.  One starting from each city going to the next clockwise.  Another starting from each city going two-over clockwise.  No matter how you slice things, for a minimal answer you need 101 legs, where one of those legs repeats a previous one.  (basically you fly all the way around the circle clockwise, stopping one step after you started to get that last person to their destination.
  
Flying a leg costs $0.20 (for the takeoff) + $1.00 per mile flown.  It's the total cost
of all the flights that must be minimized.

## Algorithm

Since an optimal solution is required, a heuristic isn't good enough: a branch-and-bound approach is necessary.  The logically simplest element to branch on is the legs of the routing, since those are what we're concerned with finding.

The routing produced by the greedy algorithm described later provides a reasonable starting upper bound.

### Brute-force branching -- suitable only for very small examples, but shakes out I/O and verification issues

0. The current best-known solution is None.

1. Use recursive branching to generate all possible INCLUDED / EXCLUDED combinations of legs.
  - when no UNDECIDED legs remain, evaluate the resulting graph: are all required cities reachable?
  - if the graph is valid, calculate the cost; if it is better than the best-known solution, it becomes the best-known solution.

(In my implementation, this was only reasonably timed for three or fewer cities.)

### Basic improvements - bounding, etc.

- Don't bother considering self-loop edges at all; start 'em out as EXCLUDED.
- If the current graph has a cost >= the best-known graph's cost, bail.
- If including the branching edge brings the cost over the best known, don't try that branch.
- Start the current-best solution with a simple take-all-the-tickets graph, as an upper bound.
- (Later) Start the current-best solution with a greedy solution as an upper bound.

### Polynomial time improvements based on shared cities.

(I consulted my advisor, who likes to play with algorithms.  These are all his ideas -- he got back to me really quickly before I even started thinking about the problem much!)

> Specifically, any time you include two edges that share a vertex, you can exclude another edge (and this effect should grow geometrically as you add edges -- you just need to make sure to add them in a good order.)

> Consider:

> 1: If you have A->B and B->C included, you can exclude A->C since that path is already available given the current set of flights.  In fact, you would actually mark it as "implicitly included" to simplify subsequent optimizations.

> 2a: If you have A->B and A->C then you can exclude BOTH B->C and C->B.  Why?  Because if they were added then one of the original edges would become redundant, and the branching process works such that once you include something, that path can only lead to solutions that keep that edge included.  Furthermore, any addition that would have made B->C or C->B at all possible can be excluded, and if either of these paths is a ticket you can backtrack right now.

> 2b: The opposite of point 2a also holds.  That is, if you have A->C and B->C then you can exclude BOTH A->B and B->A since they would each make one of the existing paths redundant.

> 3: Point number 2 has an interesting corollary.  Since we know all ticketed paths must be possible, if you have ticked path X->Y, then you cannot have both A->X and A->Y directly in the answer set.  If you did, you wouldn't need the A->Y because there would have been another route to go.  Ahh... the one exception to this rule is if the X->Y path goes through A.  So what this says is that it is easier to make rules about DIRECT paths.  OR indirect paths that are already included since we'll know what else they go through.


> That covers all of the possibilities for when two included edges share a vertex.

### Polynomial time improvements based on required origins & destinations

4a. If B is the destination of some ticket, and excluding A->B leaves only C->B as a possible leg to B, we must include C->B.

4b. If A is the origin of some ticket, and excluding A->B leaves only A->C as a possible leg from A, we must include A->C.

5. If excluding A->B leaves only one possible path between the cities of an as-yet-unfulfilled ticket,
   we must include all undecided legs on that path.
   (This turned out to slow my solution down -- I guess my implementation did too much work of its own.)
   
## Greedy Algorithm

This produces a fairly good solution that doesn't use any unticketed cities.  It's based on a minimum spanning tree approach -- but as this graph is directed, it isn't guaranteed to produce either a minimum or a tree!

0. The cost of a ticket is the cost of the direct leg that connects its cities.
1. While there are tickets remaining, choose the one with the lowest cost.
2. Add that ticket's direct leg A->B to the graph.
3. For all tickets C->D from cities C which are connected to A,
   compare the cost of C->D to the cost of B->D.
   (The cost of C->A->B is already covered.)
   If the cost of B->D is less, remove the ticket C->D from the ticket list and add the ticket B->D
4. For all tickets E->F to cities F which connect to B,
   compare the cost of E->F to the cost of E->A.
   (The cost of A->B->F is already covered.)
   If the cost of E->A is less, remove the ticket E->F and add the ticket E->A.
   
This is not guaranteed to be optimal even if all cities are ticketed, though.  For example, consider a line of cities:
A  B  C  D
Given the tickets A->C and B->D, this algorithm chooses exactly those legs to be flown.
The optimal solution, however, is A->B->C->D.
(Although no doubt the passengers would prefer the suboptimal solution!)

Still, it makes a decent upper bound solution; it's as good as or better than a simple take-all-the-tickets approach.