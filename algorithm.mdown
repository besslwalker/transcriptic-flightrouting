## Analysis

This problem is reducible from the metric Steiner tree problem, which means it is NP complete.  

A greedy algorithm which simply adds legs as needed to fulfill tickets (removing legs then made redundant, similar to growing a minimum spanning tree) will provide a reasonable solution, but it will ignore any unticketed cities and therefore can't be guaranteed to be optimal.  (Unless all cities appear on tickets, in which case hurrah!)


## Algorithm

Since an optimal solution is required, a heuristic isn't good enough: a branch-and-bound approach is necessary.  The logically simplest element to branch on is the legs of the routing, since those are what we're concerned with finding.

The routing produced by the greedy algorithm briefly described above provides a reasonable starting upper bound.

### Brute-force branching -- suitable only for very small examples, but shakes out I/O and verification issues

0. The current best-known solution is None.

1. Use recursive branching to generate all possible INCLUDED / EXCLUDED combinations of legs.
  - when no UNDECIDED legs remain, evaluate the resulting graph: are all required cities reachable?
  - if the graph is valid, calculate the cost; if it is better than the best-known solution, it becomes the best-known solution.

(In my implementation, this was only reasonably timed for three or fewer cities.)

### Basic improvements - bounding, etc.

- Don't bother considering self-loop edges at all; start 'em out as EXCLUDED.
- If the current graph has a cost >= the best-known graph's cost, bail.
